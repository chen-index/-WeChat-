#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// websocket
var io = require('socket.io')(server);
io.on('connection', (socket) => {
  console.log('websocket连接')
  // socket.emit('request', /* */); // emit an event to the socket
  // io.emit('broadcast', /* */); // emit an event to all connected sockets
  // socket.on('send', function(data){
  //   console.log('客户端发来'+ data)
  //   // io.emit('msg', {user: socket.username,msg:data})
  // }); // listen to the event
  // setInterval(function () {
  //   io.emit('xx','hello'+(new Date()));
  // },1000)
  socket.on('login', function(data){
    console.log(data + '登录了')
    // 发送数据
    socket.username = data;
    io.emit('logincount', socket.username)
    // 存储用户名
    // socket.username = data;
  });
  socket.on('logout', function(data){
    console.log(data + '断开了')
    socket.outuser = data;
    io.emit('logoutuser', socket.outuser)
    // console.log(data)
    // 存储用户名
    // socket.username = data;
  });
  socket.on('message', function(data){
    // console.log(data)
    io.emit('msg',data)
    // 存储用户名
    // socket.username = data;
  });
  socket.emit('data', () => {
    // 发送消息到服务端
    console.log(data)
  })
});

// websocket
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
